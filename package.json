{
  "name": "vscode-versionlens",
  "preview": false,
  "private": true,
  "description": "Shows the latest version for each package using code lens",
  "repository": {
    "type": "git",
    "url": "https://gitlab.com/versionlens/vscode-versionlens.git"
  },
  "author": "Peter Flannery",
  "license": "ISC",
  "version": "1.8.0-preview.1",
  "publisher": "pflannery",
  "displayName": "Version Lens",
  "icon": "images/logo.png",
  "engines": {
    "vscode": ">=1.82.0"
  },
  "keywords": [
    "versions",
    "packages",
    "dependencies",
    "references",
    "c#,composer,csharp,dart,dotnet,dub,f#,fsharp,java,jspm,maven,npm,nuget,pnpm,pub"
  ],
  "categories": [
    "Programming Languages",
    "Other"
  ],
  "activationEvents": [
    "onLanguage:json",
    "onLanguage:xml",
    "onLanguage:yaml"
  ],
  "main": "./dist/extension.bundle.js",
  "scripts": {
    "fresh": "npm run -s clean && rimraf ./node_modules test/**/node_modules && rm -f ./package-lock.json",
    "clean": "rimraf ./out ./dist",
    "precompile": "npm run -s clean && npm run -s lint:src",
    "compile": "npm run -s pack:src",
    "compile:src": "tsc -p ./tsconfig.json",
    "compile:test": "tsc -p ./tsconfig.json",
    "lint:src": "npm run -s compile:src -- --noEmit",
    "lint:test": "npm run -s compile:test -- --noEmit",
    "pack": "webpack --config=./build/webpack.config.js --env logging=true",
    "pack:src": "npm run -s pack -- --mode=development",
    "pack:test": "npm run -s pack -- --env test=true --mode=development",
    "pretest": "npm run -s clean && npm run -s lint:test && npm run -s pack:test",
    "test": "node ./test/run.vscode.tests",
    "test:unit": "npm run pretest && env TEST=unit node ./dist/extension.test.js",
    "trace": "npm run -s clean && tsc --explainFiles --project ./tsconfig.json > trace.log"
  },
  "devDependencies": {
    "@esm-test/guards": "1.0.0-beta.8",
    "@types/mocha": "10.0.2",
    "@types/node": "20.8.2",
    "@types/npm-package-arg": "6.1.2",
    "@types/sax": "1.2.5",
    "@types/source-map-support": "0.5.8",
    "@types/vscode": "1.83.0",
    "@vscode/test-electron": "2.3.5",
    "mocha": "10.2.0",
    "mocha-ui-esm": "1.0.0-beta.14",
    "rimraf": "5.0.5",
    "source-map-support": "0.5.21",
    "terser-webpack-plugin": "5.3.9",
    "ts-loader": "9.4.4",
    "ts-mockito": "2.6.1",
    "tsconfig-paths-webpack-plugin": "4.1.0",
    "typescript": "5.2.2",
    "webpack": "5.88.2",
    "webpack-cli": "5.1.4"
  },
  "dependencies": {
    "@npmcli/config": "8.0.0",
    "@npmcli/promise-spawn": "7.0.0",
    "awilix": "8.0.1",
    "dotenv": "16.3.1",
    "jsonc-parser": "3.2.0",
    "minimatch": "9.0.3",
    "npm-package-arg": "11.0.1",
    "npm-registry-fetch": "16.0.0",
    "request-light": "0.7.0",
    "sax": "1.3.0",
    "semver": "7.5.4",
    "winston": "3.7.1",
    "yaml": "2.3.2"
  },
  "contributes": {
    "commands": [
      {
        "command": "versionlens.icons.showError",
        "title": "An error has occurred. Click to see the log for details.",
        "category": "VersionLens",
        "icon": "images/icons/toggle-death.svg"
      },
      {
        "command": "versionlens.icons.showVersionLenses",
        "title": "Show dependency versions",
        "category": "VersionLens",
        "icon": "images/icons/toggle-inactive.svg"
      },
      {
        "command": "versionlens.icons.hideVersionLenses",
        "title": "Hide dependency versions",
        "category": "VersionLens",
        "icon": "images/icons/toggle-active.svg"
      },
      {
        "command": "versionlens.icons.showPrereleaseVersions",
        "title": "Show tagged dependency versions",
        "category": "VersionLens",
        "icon": "images/icons/tag-inactive.svg"
      },
      {
        "command": "versionlens.icons.hidePrereleaseVersions",
        "title": "Hide tagged dependency versions",
        "category": "VersionLens",
        "icon": "images/icons/tag-active.svg"
      },
      {
        "command": "versionlens.icons.showingProgress",
        "enablement": "false",
        "title": "Analyzing dependencies...",
        "category": "VersionLens",
        "icon": "images/icons/toggle-active-progress.svg"
      },
      {
        "command": "versionlens.suggestions.clearCache",
        "title": "Clear cache",
        "category": "VersionLens"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "versionlens.icons.showPrereleaseVersions",
          "when": "versionlens.show && versionlens.providerActive"
        },
        {
          "command": "versionlens.icons.hidePrereleaseVersions",
          "when": "versionlens.show && versionlens.providerActive"
        },
        {
          "command": "versionlens.icons.showVersionLenses",
          "when": "versionlens.show && versionlens.providerActive"
        },
        {
          "command": "versionlens.icons.hideVersionLenses",
          "when": "versionlens.show && versionlens.providerActive"
        },
        {
          "command": "versionlens.icons.showError",
          "when": "false"
        }
      ],
      "editor/title": [
        {
          "command": "versionlens.icons.showError",
          "when": "versionlens.providerError && versionlens.providerActive && textCompareEditorVisible == false",
          "group": "navigation@1"
        },
        {
          "command": "versionlens.icons.showVersionLenses",
          "when": "versionlens.show == false && versionlens.providerActive && versionlens.providerBusy == false && versionlens.providerError == false && textCompareEditorVisible == false",
          "group": "navigation@1"
        },
        {
          "command": "versionlens.icons.hideVersionLenses",
          "when": "versionlens.show && versionlens.providerActive && versionlens.providerBusy == false && versionlens.providerError == false  && textCompareEditorVisible == false",
          "group": "navigation@1"
        },
        {
          "command": "versionlens.icons.showingProgress",
          "when": "versionlens.providerBusy && versionlens.providerActive && versionlens.providerError == false && textCompareEditorVisible == false",
          "group": "navigation@1"
        },
        {
          "command": "versionlens.icons.showPrereleaseVersions",
          "when": "versionlens.showPrereleases == false && versionlens.show && versionlens.providerActive && textCompareEditorVisible == false",
          "group": "navigation@2"
        },
        {
          "command": "versionlens.icons.hidePrereleaseVersions",
          "when": "versionlens.showPrereleases && versionlens.show && versionlens.providerActive && textCompareEditorVisible == false",
          "group": "navigation@2"
        }
      ]
    },
    "configuration": {
      "title": "VersionLens",
      "properties": {
        "versionlens.suggestions.showOnStartup": {
          "type": "boolean",
          "default": false,
          "description": "Show version suggestions by default on vscode start up."
        },
        "versionlens.suggestions.showPrereleasesOnStartup": {
          "type": "boolean",
          "default": false,
          "description": "Show version prerelease suggestions by default on vscode start up."
        },
        "versionlens.suggestions.indicators": {
          "type": "object",
          "default": {
            "Directory": "üìÅ ",
            "Error": "üî¥",
            "Latest": "üü¢",
            "NoMatch": "‚ö™",
            "Match": "üü°",
            "Updateable": "‚Üë "
          },
          "properties": {
            "name": {
              "type": "string"
            },
            "indicator": {
              "type": "string"
            }
          },
          "description": "The indicators used when showing version suggestion statuses."
        },
        "versionlens.logging.level": {
          "type": "string",
          "default": "error",
          "enum": [
            "error",
            "info",
            "debug",
            "silly"
          ],
          "description": "Sets the level of logs to be written to the VersionLens output channel."
        },
        "versionlens.caching.duration": {
          "type": [
            "null",
            "number"
          ],
          "default": 3,
          "description": "Specifies how long (in minutes) version suggestions will be cached. Setting the duration to 0 will disable caching."
        },
        "versionlens.http.strictSSL": {
          "type": [
            "boolean"
          ],
          "default": true,
          "description": "When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned."
        },
        "versionlens.npm.onSaveChanges": {
          "type": "string",
          "default": null,
          "description": "A task label defined in your tasks.json that will be executed when you save a package document that has dependency changes. Ensure to set your `task.options.cwd` to the predefined variable called `${fileDirname}` when running an install task"
        },
        "versionlens.npm.files": {
          "type": "string",
          "default": "**/package.json",
          "description": "Specifies which files to register with version lenses. You can use [minimatch](https://github.com/isaacs/minimatch) expressions to match file names. You will need to restart vscode when changing this setting."
        },
        "versionlens.npm.caching.duration": {
          "type": [
            "null",
            "number"
          ],
          "description": "Specifies how long (in minutes) version suggestions will be cached."
        },
        "versionlens.npm.http.strictSSL": {
          "type": [
            "null",
            "boolean"
          ],
          "description": "When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'"
        },
        "versionlens.npm.dependencyProperties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 1,
          "default": [
            "dependencies",
            "devDependencies",
            "peerDependencies",
            "optionalDependencies",
            "overrides",
            "overrides.*",
            "jspm.dependencies",
            "jspm.devDependencies",
            "jspm.peerDependencies",
            "jspm.optionalDependencies",
            "pnpm.overrides",
            "pnpm.overrides.*"
          ],
          "description": "Defines which properties in package.json should be parsed by this extension"
        },
        "versionlens.npm.prereleaseTagFilter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 0,
          "default": [],
          "description": "Defines a list of prerelease tags you only want to see. i.e. ['alpha', 'beta']. If you don't specify any prerelease tags then all the prerelease tags newer the the latest version are shown when the 'show prereleases' icon is activated."
        },
        "versionlens.pub.onSaveChanges": {
          "type": "string",
          "default": null,
          "description": "A task label defined in your tasks.json that will be executed when you save a package document that has dependency changes. Ensure to set your `task.options.cwd` to the predefined variable called `${fileDirname}` when running an install task"
        },
        "versionlens.pub.files": {
          "type": "string",
          "default": "**/pubspec.yaml",
          "description": "Specifies which files to register with version lenses. You can use [minimatch](https://github.com/isaacs/minimatch) expressions to match file names. You will need to restart vscode when changing this setting."
        },
        "versionlens.pub.caching.duration": {
          "type": [
            "null",
            "number"
          ],
          "description": "Specifies how long (in minutes) version suggestions will be cached."
        },
        "versionlens.pub.http.strictSSL": {
          "type": [
            "null",
            "boolean"
          ],
          "description": "When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'"
        },
        "versionlens.pub.dependencyProperties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 1,
          "default": [
            "dependencies",
            "dev_dependencies"
          ],
          "description": "Defines which properties in pubspec.yaml should be parsed by this extension"
        },
        "versionlens.pub.apiUrl": {
          "type": "string",
          "default": "https://pub.dev/api/packages",
          "description": "Defines the pub api to use for package searching."
        },
        "versionlens.pub.prereleaseTagFilter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 0,
          "default": [],
          "description": "Defines a list of prerelease tags you only want to see. i.e. ['alpha', 'beta']. If you don't specify any prerelease tags then all the prerelease tags newer the the latest version are shown when the 'show prereleases' icon is activated."
        },
        "versionlens.dotnet.onSaveChanges": {
          "type": "string",
          "default": null,
          "description": "A task label defined in your tasks.json that will be executed when you save a package document that has dependency changes. Ensure to set your `task.options.cwd` to the predefined variable called `${fileDirname}` when running an install task"
        },
        "versionlens.dotnet.files": {
          "type": "string",
          "default": "**/*.{csproj,fsproj,targets,props}",
          "description": "Specifies which files to register with version lenses. You can use [minimatch](https://github.com/isaacs/minimatch) expressions to match file names. You will need to restart vscode when changing this setting."
        },
        "versionlens.dotnet.caching.duration": {
          "type": [
            "null",
            "number"
          ],
          "description": "Specifies how long (in minutes) version suggestions will be cached."
        },
        "versionlens.dotnet.http.strictSSL": {
          "type": [
            "null",
            "boolean"
          ],
          "description": "When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'"
        },
        "versionlens.dotnet.dependencyProperties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 1,
          "default": [
            "Project.Sdk",
            "Project.ItemGroup.GlobalPackageReference",
            "Project.ItemGroup.PackageReference",
            "Project.ItemGroup.PackageVersion",
            "Project.ItemGroup.DotNetCliToolReference"
          ],
          "description": "Defines which project properties should be parsed by this extension"
        },
        "versionlens.dotnet.nuget.sources": {
          "type": "array",
          "items": {
            "type": [
              "null",
              "string"
            ]
          },
          "default": [],
          "description": "Defines which nuget source to use for package searching. Has to be a v3 'service index' endpoint. e.g. https://api.nuget.org/v3/index.json. Defaults to the sources output by `dotnet nuget list source`"
        },
        "versionlens.dotnet.prereleaseTagFilter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 0,
          "default": [],
          "description": "Defines a list of prerelease tags you only want to see. i.e. ['alpha', 'beta']. If you don't specify any prerelease tags then all the prerelease tags newer the the latest version are shown when the 'show prereleases' icon is activated."
        },
        "versionlens.dub.onSaveChanges": {
          "type": "string",
          "default": null,
          "description": "A task label defined in your tasks.json that will be executed when you save a package document that has dependency changes. Ensure to set your `task.options.cwd` to the predefined variable called `${fileDirname}` when running an install task"
        },
        "versionlens.dub.files": {
          "type": "string",
          "default": "**/{dub.json,dub.selections.json}",
          "description": "Specifies which files to register with version lenses. You can use [minimatch](https://github.com/isaacs/minimatch) expressions to match file names. You will need to restart vscode when changing this setting."
        },
        "versionlens.dub.caching.duration": {
          "type": [
            "null",
            "number"
          ],
          "description": "Specifies how long (in minutes) version suggestions will be cached."
        },
        "versionlens.dub.http.strictSSL": {
          "type": [
            "null",
            "boolean"
          ],
          "description": "When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'"
        },
        "versionlens.dub.apiUrl": {
          "type": "string",
          "default": "https://code.dlang.org/api/packages",
          "description": "Defines the api to use for dub package searching."
        },
        "versionlens.dub.dependencyProperties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 1,
          "default": [
            "dependencies",
            "versions"
          ],
          "description": "Defines which properties in dub.json should be parsed by this extension"
        },
        "versionlens.dub.prereleaseTagFilter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 0,
          "default": [],
          "description": "Defines a list of prerelease tags you only want to see. i.e. ['alpha', 'beta']. If you don't specify any prerelease tags then all the prerelease tags newer the the latest version are shown when the 'show prereleases' icon is activated."
        },
        "versionlens.composer.onSaveChanges": {
          "type": "string",
          "default": null,
          "description": "A task label defined in your tasks.json that will be executed when you save a package document that has dependency changes. Ensure to set your `task.options.cwd` to the predefined variable called `${fileDirname}` when running an install task"
        },
        "versionlens.composer.files": {
          "type": "string",
          "default": "**/composer.json",
          "description": "Specifies which files to register with version lenses. You can use [minimatch](https://github.com/isaacs/minimatch) expressions to match file names. You will need to restart vscode when changing this setting."
        },
        "versionlens.composer.caching.duration": {
          "type": [
            "null",
            "number"
          ],
          "description": "Specifies how long (in minutes) version suggestions will be cached."
        },
        "versionlens.composer.http.strictSSL": {
          "type": [
            "null",
            "boolean"
          ],
          "description": "When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'"
        },
        "versionlens.composer.apiUrl": {
          "type": "string",
          "default": "https://repo.packagist.org/p2",
          "description": "Defines the api to use for composer package searching."
        },
        "versionlens.composer.dependencyProperties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 1,
          "default": [
            "require",
            "require-dev"
          ],
          "description": "Defines which properties in composer.json should be parsed by this extension"
        },
        "versionlens.composer.prereleaseTagFilter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 0,
          "default": [],
          "description": "Defines a list of prerelease tags you only want to see. i.e. ['alpha', 'beta']. If you don't specify any prerelease tags then all the prerelease tags newer the the latest version are shown when the 'show prereleases' icon is activated."
        },
        "versionlens.maven.onSaveChanges": {
          "type": "string",
          "default": null,
          "description": "A task label defined in your tasks.json that will be executed when you save a package document that has dependency changes. Ensure to set your `task.options.cwd` to the predefined variable called `${fileDirname}` when running an install task"
        },
        "versionlens.maven.files": {
          "type": "string",
          "default": "**/pom.xml",
          "description": "Specifies which files to register with version lenses. You can use [minimatch](https://github.com/isaacs/minimatch) expressions to match file names. You will need to restart vscode when changing this setting."
        },
        "versionlens.maven.caching.duration": {
          "type": [
            "null",
            "number"
          ],
          "description": "Specifies how long (in minutes) version suggestions will be cached."
        },
        "versionlens.maven.http.strictSSL": {
          "type": [
            "null",
            "boolean"
          ],
          "description": "When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'"
        },
        "versionlens.maven.apiUrl": {
          "type": "string",
          "default": "",
          "description": "Defines the api to use for maven package searching."
        },
        "versionlens.maven.dependencyProperties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 1,
          "default": [
            "project.dependencies.dependency",
            "project.parent"
          ],
          "description": "Defines which properties in pom.xml should be parsed by this extension"
        },
        "versionlens.maven.prereleaseTagFilter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "minItems": 0,
          "default": [],
          "description": "Defines a list of prerelease tags you only want to see. i.e. ['alpha', 'beta']. If you don't specify any prerelease tags then all the prerelease tags newer the the latest version are shown when the 'show prereleases' icon is activated."
        },
        "versionlens.github.accessToken": {
          "type": [
            "null",
            "string"
          ],
          "default": "",
          "description": "Used for making basic read only github api requests. To generate a token see https://help.github.com/articles/creating-an-access-token-for-command-line-use/#creating-a-token. When no token is provided then access to the github api is rate limited to 60 requests every 10 minutes or so."
        }
      }
    }
  }
}
